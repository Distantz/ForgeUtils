from shared_gen import get_insert_name, get_update_name
from tabletypes import TableData, TableParam

sql_luafunc_template = """
--- Note: Autogenerated.
{0}
function {1}.{2}({3})
    DatabaseUtils.ExecuteQuery("{4}", "{5}", {{{3}}}, {6})
end
"""

sql_luafunccomment_template = "---@param {0} {1} {2}"

db_manager_file = """---
--- NOTE: THIS FILE IS AUTOGENERATED.
--- PLEASE NOTE THAT THIS IS SUBJECT TO CHANGE
--- BETWEEN EACH VERSION. IF BROKEN BY AN UPDATE,
--- REGENERATE VIA THE EXT FOLDER.
--- 
local global = _G
local ipairs = global.ipairs
local DatabaseUtils = require("forgeutils.internal.database.databaseutils")

local logger = require("forgeutils.logger").Get("{0}")

---@class {1}.{0}
--- Note: Autogenerated!
--- This is a generated lua binding layer for the {3} database.
local {0} = {{}}

---@private
--- This method is called after data is merged
{0}.InsertToDBs = function()
    {0}.BindPreparedStatements()
end

{0}.tPreparedStatements = {{
{2}
}}

---@private
function {0}.BindPreparedStatements()
    logger:DebugQuery("BindPreparedStatements()")
    for _, filename in ipairs({0}.tPreparedStatements) do
        DatabaseUtils.BindPreparedStatement(\"{3}\", filename)
    end
end

{4}

return {0}
"""


def generate_lua_source_file(
        manager_name : str,
        manager_luapath : str, 
        database_name : str, 
        pscollection_names : list[str],
        extra_lua_functions : str = ""
    ) -> str:
    return db_manager_file.format(
        manager_name,
        manager_luapath,
        ", \n".join([
            f"    \"{pscoll}\""
            for pscoll in pscollection_names
        ]),
        database_name,
        extra_lua_functions
    )

def get_luadoc_desc(param_data : TableParam) -> str:
    res = ""
    if (param_data.default != None):
        res += f"Default = {param_data.default}. "

    if (len(param_data.most_common_values) > 0):
        res += f"Common Values = {", ".join(param_data.most_common_values)}. "
    return res

def get_luadoc_comment(param_name : str, param_data : TableParam) -> str:
    return sql_luafunccomment_template.format(
        param_name,
        f"{map_sqltype_to_lua(param_data.sql_type)}{"|nil" if not param_data.not_null else ""}",
        get_luadoc_desc(param_data)
    )

def map_sqltype_to_lua(sql_type: str) -> str:
    sql_type = sql_type.lower()
    if sql_type in ("integer", "int"):
        return "integer"
    if sql_type in ("real", "double"):
        return "number"
    if sql_type in ("text"):
        return "string"
    return sql_type

def get_insert_method(manager_name : str, table : str, table_data : TableData) -> str:
    required_parameters = table_data.get_insert_parameters()

    luadoc_comments = "\n".join(
        [
            get_luadoc_comment(param_name, param_data)
            for param_name, param_data in required_parameters.items()
        ]
    )
    param_count = len(required_parameters.keys())
    param_names = ", ".join(required_parameters.keys())
    pscol_name = get_insert_name(table)

    return sql_luafunc_template.format(
        luadoc_comments,
        manager_name,
        pscol_name,
        param_names,
        table,
        pscol_name,
        param_count
    )

def get_update_method(manager_name : str, table : str, lookup_name : str, lookup_param : TableParam, param_name : str, param_data : TableParam) -> str:
    pscol_name = get_update_name(table, param_name)
    return sql_luafunc_template.format(
        f"{get_luadoc_comment(lookup_name, lookup_param)}(Lookup Key)\n{get_luadoc_comment(param_name, param_data)}",
        manager_name,
        pscol_name,
        f"{lookup_name}, {param_name}",
        table,
        pscol_name,
        2
    )